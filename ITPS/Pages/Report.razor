@page "/Report"
@inject Radzen.DialogService dialogService
@using Radzen
@using ITPS.Data.Code
<div class="container-fluid" style="width:1500px !important; margin-left:-225px">
    @if (!string.IsNullOrEmpty(PageMessage))
    {
        <div class="alert alert-success" role="alert">
            @((MarkupString)PageMessage)
        </div>
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @((MarkupString)ErrorMessage)
        </div>
    }
    <h1>Report</h1>
    <div class="row">
        <div class="col-sm-12 col-lg-6">
            <RadzenCard class="w-100 mb-4">
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" For="dataLabels" Style="margin-left: 8px; vertical-align: middle;" />
            </RadzenCard>
            <RadzenChart SeriesClick="OnAssignedToSeriesClick">
                <RadzenDonutSeries Data="@PageModel?.AssignedToData" CategoryProperty="DisplayValue" ValueProperty="DataCount">
                    <ChildContent>
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </ChildContent>
                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Assigned To</div>
                            <div>Ticket Count</div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
            </RadzenChart>
        </div>
        <div class="col-sm-12 col-lg-6">
            <RadzenCard class="w-100 mb-4">
                <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                <RadzenLabel Text="Show Data Labels" For="dataLabels" Style="margin-left: 8px; vertical-align: middle;" />
            </RadzenCard>
            <RadzenChart SeriesClick="OnStatusSeriesClick">
                <RadzenDonutSeries Data="@PageModel?.StatusData" CategoryProperty="DisplayValue" ValueProperty="DataCount">
                    <ChildContent>
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </ChildContent>
                    <TitleTemplate>
                        <div class="rz-donut-content">
                            <div>Status</div>
                            <div>Ticket Count</div>
                        </div>
                    </TitleTemplate>
                </RadzenDonutSeries>
            </RadzenChart>
        </div>
    </div>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5"
                    AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@GridData" TItem="TicketEntity" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="TicketEntity" Title="ID" TextAlign="TextAlign.Center">
                <Template Context="TheData">
                    <a href="/ticket/@TheData.TicketKey">@TheData.TicketKey</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TicketEntity" Property="ShortDescription" Title="Description" />
            <RadzenDataGridColumn TItem="TicketEntity" Property="AssignedToDisplayName" Title="Assigned To" />
            <RadzenDataGridColumn TItem="TicketEntity" Property="DueDate" Title="Due Date" FormatString="{0:d}" />
            <RadzenDataGridColumn TItem="TicketEntity" Property="Status" Title="Status" />
        </Columns>
    </RadzenDataGrid>

</div>
@code {
    [CascadingParameter]
    public CascadingAppState AppState { get; set; }
    private OverviewReportEntity PageModel = new();
    private string PageMessage = string.Empty;
    private string ErrorMessage = string.Empty;
    private OverviewChartEntity SelectedStatus = new();
    private OverviewChartEntity SelectedAssignedTo = new();
    private List<TicketEntity> GridData = new();
    protected override void OnInitialized()
    {
        ReloadModel();
    }
    private void ReloadModel()
    {
        try
        {
            PageModel = ITPS.Data.Code.TicketFactory.GetOverviewReportData();
            if (PageModel.ErrorObject != null) { ErrorMessage = PageModel.ErrorObject.Message; }
            else
            {
                SelectedAssignedTo = PageModel.AssignedToData.Where(x => x.TableKey == -1).FirstOrDefault();
                SelectedStatus = PageModel.StatusData.Where(x => x.TableKey == -1).FirstOrDefault();
                FilterGrid();
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

    }
    protected void OnRowRender(RowRenderEventArgs<NotificationEntity> args)
    {
        if (args.Data.ReadDateTime == DateTime.MinValue)
        { args.Attributes.Add("style", $"background-color: #CFE2FF"); }
    }
    private void OnStatusSeriesClick(SeriesClickEventArgs args)
    {
        SelectedStatus = ((OverviewChartEntity)args.Data);
        PageMessage = "Status: " + SelectedStatus.DisplayValue + " : " + SelectedStatus.DataCount;
        FilterGrid();
    }
    private void OnAssignedToSeriesClick(SeriesClickEventArgs args)
    {
        SelectedAssignedTo = ((OverviewChartEntity)args.Data);
        PageMessage = "Assigned To: " + SelectedAssignedTo.DisplayValue + " : " + SelectedAssignedTo.DataCount;
        FilterGrid();
    }
    bool showDataLabels = false;
    private void FilterGrid()
    {
            GridData = PageModel.DetailData.Where(x => x.StatusKey == (SelectedStatus.TableKey == -1 ? x.StatusKey : SelectedStatus.TableKey) && x.AssignedToUserProfileKey == (SelectedAssignedTo.TableKey == -1 ? x.AssignedToUserProfileKey : SelectedAssignedTo.TableKey)).ToList();
        PageMessage = "<center><u><b>Current Filtering On: </b></u> Assigned To -  " + SelectedAssignedTo.DisplayValue + " : " + SelectedAssignedTo.DataCount + " / Status - " + SelectedStatus.DisplayValue + " : " + SelectedStatus.DataCount + "</center>";
    }
}
