@page "/TicketPriority"
@inject Radzen.DialogService dialogService
@using Radzen
@using ITPS.Data.Code
<div class="container-fluid" style="width:1500px !important; margin-left:-225px">
    @if (!string.IsNullOrEmpty(PageMessage))
    {
        <div class="alert alert-success" role="alert">
            @PageMessage
        </div>
    }
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            @ErrorMessage
        </div>
    }
    <RadzenButton Text="Save" Icon="save" ButtonStyle="ButtonStyle.Success" Style="float:right" Click="() => SaveChanges()"></RadzenButton>
    <br /><br/>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5"
                    AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    Data="@PageModel" TItem="TicketEntity" LogicalFilterOperator="LogicalFilterOperator.Or" RowRender="OnRowRender">
        <Columns>
            <RadzenDataGridColumn TItem="TicketEntity" Title="ID" TextAlign="TextAlign.Center" Width="5%">
                <Template Context="TheData">
                    @if(TheData.Priority==1)
                    {
                        <span style="color: white!important" title="@TheData.TicketKey"><a href="/ticket/@TheData.TicketKey">@TheData.TicketKey</a></span>
                    }
                    else
                    {
                        <span style="color: black!important" title="@TheData.TicketKey"><a href="/ticket/@TheData.TicketKey">@TheData.TicketKey</a></span>
                    }
                    
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TicketEntity" Property="ShortDescription" Title="Summary">
                <Template Context="TheData">
                    @if (TheData.Priority == 1)
                    {
                        <span style="color: white!important" title="@TheData.ShortDescription">@TheData.ShortDescription</span>
                    }
                    else
                    {
                        <span style="color: black!important" title="@TheData.ShortDescription">@TheData.ShortDescription</span>
                    }

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TicketEntity" Property="LongDescription" Title="Description">
                <Template Context="TheData">
                    @if (TheData.Priority == 1)
                    {
                        <span style="color: white!important" title="@TheData.LongDescription">@TheData.LongDescription</span>
                    }
                    else
                    {
                        <span style="color: black!important" title="@TheData.LongDescription">@TheData.LongDescription</span>
                    }

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TicketEntity" Property="AssignedToDisplayName" Title="Assigned To">
                <Template Context="TheData">
                    @if (TheData.Priority == 1)
                    {
                        <span style="color: white!important" title="@TheData.AssignedToDisplayName">@TheData.AssignedToDisplayName</span>
                    }
                    else
                    {
                        <span style="color: black!important" title="@TheData.AssignedToDisplayName">@TheData.AssignedToDisplayName</span>
                    }

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TicketEntity" Property="TicketOwnerDisplayName" Title="Owner">
                <Template Context="TheData">
                    @if (TheData.Priority == 1)
                    {
                        <span style="color: white!important" title="@TheData.TicketOwnerDisplayName">@TheData.TicketOwnerDisplayName</span>
                    }
                    else
                    {
                        <span style="color: black!important" title="@TheData.TicketOwnerDisplayName">@TheData.TicketOwnerDisplayName</span>
                    }

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TicketEntity" Property="DueDate" Title="Due Date">
                <Template Context="TheData">
                    @if (TheData.Priority == 1)
                    {
                        <span style="color: white!important" title="@TheData.DueDate.ToString("yyyy-MM-dd")">@TheData.DueDate.ToString("yyyy-MM-dd")</span>
                    }
                    else
                    {
                        <span style="color: black!important" title="@TheData.DueDate.ToString("yyyy-MM-dd")">@TheData.DueDate.ToString("yyyy-MM-dd")</span>
                    }

                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TicketEntity" Property="Status" Title="Status">
                <Template Context="TheData">
                    @if (TheData.Priority == 1)
                    {
                        <span style="color: white!important" title="@TheData.Status">@TheData.Status</span>
                    }
                    else
                    {
                        <span style="color: black!important" title="@TheData.Status">@TheData.Status</span>
                    }
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TicketEntity" Title="Priority" TextAlign="TextAlign.Center" Width="10%">
                <Template Context="TheData" >
                    <RadzenNumeric @bind-Value=@TheData.Priority Min="1" TValue="int" Max="@PageModel.Count" Change=@(args => SortGrid(TheData.TicketKey)) />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>
@code {
    [CascadingParameter]
    public CascadingAppState AppState { get; set; }
    private List<TicketEntity> PageModel = new();
    private string PageMessage = string.Empty;
    private string ErrorMessage = string.Empty;
    private List<int> ChangedTicketKeys = new();
    protected override void OnInitialized()
    {
        ReloadModel();
    }
    private void ReloadModel()
    {
        try
        {
            PageModel = TicketFactory.GetReportData();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }

    }
    private void SortGrid(int ticketKey)
    {
        LogTicketChange(ticketKey);
        PageModel = PageModel.OrderBy(x => x.Priority).ToList();
        StateHasChanged();
    }
    private void SaveChanges()
    {
        List<string> errorMessages = new();
        try
        {
            ClearMessages();
            foreach(int i in ChangedTicketKeys)
            {
                var currentTicket = PageModel.Where(x => x.TicketKey == i).FirstOrDefault();
                currentTicket = TicketFactory.SaveTicket(currentTicket, AppState.CurrentUser);
                if(currentTicket.ErrorObject!= null)
                {errorMessages.Add("There was an error updating ticket #" + currentTicket.TicketKey + ": " + currentTicket.ErrorObject.Message);}
            }
            if(errorMessages.Count==0)
            { PageMessage = "Your tickets were updated successfully!"; }
            else
            { ErrorMessage = "There was a problem saving some of your information: " + string.Join(";", errorMessages); }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    private void ClearMessages()
    {
        PageMessage = string.Empty;
        ErrorMessage = string.Empty;
    }
    private void LogTicketChange(int ticketKey)
    {
        if(!ChangedTicketKeys.Contains(ticketKey))
        { ChangedTicketKeys.Add(ticketKey); }
    }
    protected void OnRowRender(RowRenderEventArgs<TicketEntity> args)
    {
        if(args.Data.Priority==1)
        { args.Attributes.Add("style", $"background-color: red"); }
    }
    protected void CellRender(DataGridCellRenderEventArgs<TicketEntity> args)
    {
        if (args.Data.Priority == 1)
        {
            args.Attributes.Add("style", "color: white !important;");
            args.Attributes.Add("class", "white-text");
        }
    }
}
